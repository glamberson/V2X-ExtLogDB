Certainly. Here's a step-by-step recap of what we did to make the login system work:

1. PostgreSQL Database Setup:

   a. Ensure the pgcrypto extension is enabled:
   ```sql
   CREATE EXTENSION IF NOT EXISTS pgcrypto;
   ```

   b. Create a 'login' role for MS Access to connect to the database:
   ```sql
   CREATE ROLE login WITH LOGIN PASSWORD 'your_secure_password';
   GRANT CONNECT ON DATABASE your_database_name TO login;
   GRANT USAGE ON SCHEMA public TO login;
   GRANT EXECUTE ON FUNCTION public.login_wrapper(VARCHAR, VARCHAR, INTERVAL) TO login;
   ```

2. Database Functions:

   a. Create a function to hash passwords:
   ```sql
   CREATE OR REPLACE FUNCTION hash_password(password TEXT) RETURNS TEXT AS $$
   BEGIN
       RETURN crypt(password, gen_salt('bf'));
   END;
   $$ LANGUAGE plpgsql;
   ```

   b. Create or update the login_wrapper function:
   ```sql
   CREATE OR REPLACE FUNCTION public.login_wrapper(p_username VARCHAR, p_password VARCHAR, p_duration INTERVAL)
   RETURNS UUID
   LANGUAGE plpgsql
   SECURITY DEFINER
   AS $$
   DECLARE
       v_result UUID;
   BEGIN
       v_result := user_login(p_username, p_password, p_duration);
       RETURN v_result;
   END;
   $$;
   ```

   c. Update the user_login function:
   ```sql
   CREATE OR REPLACE FUNCTION user_login(
       p_username VARCHAR,
       p_password VARCHAR,
       p_duration INTERVAL
   )
   RETURNS UUID AS $$
   DECLARE
       v_user_id INT;
       v_role_id INT;
       v_password_hash VARCHAR;
       v_session_id UUID;
   BEGIN
       -- Check if the user exists and get the password hash
       SELECT user_id, role_id, password_hash 
       INTO v_user_id, v_role_id, v_password_hash
       FROM users
       WHERE username = p_username;

       -- Verify the password
       IF FOUND AND crypt(p_password, v_password_hash) = v_password_hash THEN
           -- Create a session
           v_session_id := create_session(v_user_id, v_role_id, p_duration);

           -- Log the login activity
           PERFORM log_user_activity(v_user_id, CURRENT_TIMESTAMP, NULL, 'User logged in');

           RETURN v_session_id;
       ELSE
           -- Log the failed login attempt
           PERFORM log_failed_login_attempt(p_username, 'Incorrect password');

           RETURN NULL;
       END IF;
   EXCEPTION
       WHEN NO_DATA_FOUND THEN
           -- Log the failed login attempt
           PERFORM log_failed_login_attempt(p_username, 'User not found');

           RETURN NULL;
   END;
   $$ LANGUAGE plpgsql;
   ```

   d. Ensure the log_user_activity function is correct:
   ```sql
   CREATE OR REPLACE FUNCTION log_user_activity(
       p_user_id INT,
       p_login_time TIMESTAMPTZ,
       p_logout_time TIMESTAMPTZ,
       p_activity_details TEXT
   )
   RETURNS VOID AS $$
   BEGIN
       INSERT INTO user_activity (
           user_id,
           login_time,
           logout_time,
           activity_details
       )
       VALUES (
           p_user_id,
           p_login_time,
           p_logout_time,
           p_activity_details
       );
   END;
   $$ LANGUAGE plpgsql;
   ```

3. MS Access VBA Setup:

   a. Add a reference to "Microsoft ActiveX Data Objects x.x Library" in the VBA editor (Tools > References).

   b. Create a module and add the following functions:

   ```vba
   Public g_sessionToken As String

   Public Function CreatePostgresConnection() As ADODB.Connection
       Dim conn As ADODB.Connection
       Set conn = New ADODB.Connection

       conn.ConnectionString = "Driver={PostgreSQL Unicode};" & _
                               "Server=your_server_address;" & _
                               "Port=5432;" & _
                               "Database=your_database_name;" & _
                               "Uid=login;" & _
                               "Pwd=your_secure_password;"
       conn.Open
       
       Set CreatePostgresConnection = conn
   End Function

   Public Function ValidateUser(username As String, password As String) As Boolean
       Dim conn As ADODB.Connection
       Dim cmd As ADODB.Command
       Dim rs As ADODB.Recordset
       Dim isValid As Boolean
       Dim tempSessionToken As Variant

       Set conn = CreatePostgresConnection()

       Set cmd = New ADODB.Command
       With cmd
           .ActiveConnection = conn
           .CommandType = adCmdText
           .CommandText = "SELECT login_wrapper(?, ?, ?)"
           .Parameters.Append .CreateParameter("@p_username", adVarChar, adParamInput, 255, username)
           .Parameters.Append .CreateParameter("@p_password", adVarChar, adParamInput, 255, password)
           .Parameters.Append .CreateParameter("@p_duration", adVarChar, adParamInput, 50, "1 hour")
       End With

       Set rs = cmd.Execute

       If Not rs.EOF Then
           tempSessionToken = rs.Fields(0).Value
           If Not IsNull(tempSessionToken) Then
               g_sessionToken = CStr(tempSessionToken)
               isValid = True
           Else
               g_sessionToken = ""
               isValid = False
           End If
       Else
           g_sessionToken = ""
           isValid = False
       End If
       
       rs.Close
       conn.Close

       ValidateUser = isValid
   End Function
   ```

   c. In the login form's button click event:

   ```vba
   Private Sub btnLogin_Click()
       Dim username As String
       Dim password As String
       
       username = Me.txtUsername.Value
       password = Me.txtPassword.Value
       
       If ValidateUser(username, password) Then
           MsgBox "Login successful! Session token: " & g_sessionToken
           ' Here you would typically open your main form or navigate to the main part of your application
       Else
           MsgBox "Login failed. Please check your username and password."
       End If
   End Sub
   ```

4. Testing:
   - Ensure a test user exists in the database with a hashed password.
   - Try logging in through the MS Access form with correct and incorrect credentials.
   - Check the user_activity table in the database to confirm that login attempts are being logged.

Remember to replace placeholders like 'your_server_address', 'your_database_name', and 'your_secure_password' with actual values.

This setup creates a secure login system with password hashing, session management, and activity logging, all while keeping sensitive operations on the database side.