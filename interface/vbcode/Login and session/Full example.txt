In VBA, it's common to establish a database connection whenever you need to perform an action that interacts with the database. To avoid repeating the connection string in every function, you can centralize the connection logic. Once a user is logged in and a session is established, you can use the stored session token for subsequent actions. Hereâ€™s a cleaner way to handle the connection and session management.

### Step 1: Centralize the Connection Logic

Create a function to establish a connection using the generic user credentials.

```vba
' Function to create a DSN-less connection using the generic user
Public Function CreatePostgresConnection() As ADODB.Connection
    Dim conn As ADODB.Connection
    Set conn = New ADODB.Connection

    conn.ConnectionString = "Driver={PostgreSQL Unicode};" & _
                            "Server=your_server_address;" & _
                            "Port=5432;" & _
                            "Database=your_database_name;" & _
                            "Uid=generic_user;" & _
                            "Pwd=generic_password;"
    conn.Open
    
    Set CreatePostgresConnection = conn
End Function
```

### Step 2: Store the Session Token After Login

Store the session token in a global variable after a successful login.

```vba
' Declare a global variable to store the session token
Public g_sessionToken As String

' Function to validate user login and store session token
Public Function ValidateUser(username As String, password As String) As Boolean
    Dim conn As ADODB.Connection
    Dim cmd As ADODB.Command
    Dim rs As ADODB.Recordset
    Dim isValid As Boolean

    Set conn = CreatePostgresConnection()

    Set cmd = New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandText = "SELECT user_login(?, ?, ?)"
    cmd.Parameters.Append cmd.CreateParameter("@p_username", adVarChar, adParamInput, 255, username)
    cmd.Parameters.Append cmd.CreateParameter("@p_password", adVarChar, adParamInput, 255, password)
    cmd.Parameters.Append cmd.CreateParameter("@p_duration", adVarChar, adParamInput, 255, "1 hour") ' Session duration

    Set rs = cmd.Execute
    If Not rs.EOF Then
        g_sessionToken = rs.Fields(0).Value
        isValid = Not IsNull(g_sessionToken)
    End If
    
    rs.Close
    conn.Close

    ValidateUser = isValid
End Function
```

### Step 3: Use the Stored Session Token for Subsequent Actions

Use the session token stored in the global variable for all subsequent database operations.

```vba
' Function to log an action
Public Sub LogAction(action As String, details As String)
    Dim conn As ADODB.Connection
    Dim cmd As ADODB.Command

    Set conn = CreatePostgresConnection()

    Set cmd = New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandText = "SELECT log_action(?, ?, ?)"
    cmd.Parameters.Append cmd.CreateParameter("@p_session_id", adVarChar, adParamInput, 255, g_sessionToken)
    cmd.Parameters.Append cmd.CreateParameter("@p_action", adVarChar, adParamInput, 255, action)
    cmd.Parameters.Append cmd.CreateParameter("@p_details", adVarChar, adParamInput, 255, details)
    
    cmd.Execute

    conn.Close
End Sub
```

### Step 4: Invalidate the Session on Logout

Ensure the session is invalidated when the user logs out.

```vba
' Function to log out the user and invalidate the session token
Public Sub LogoutUser()
    Dim conn As ADODB.Connection
    Dim cmd As ADODB.Command

    Set conn = CreatePostgresConnection()

    Set cmd = New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandText = "SELECT invalidate_session(?)"
    cmd.Parameters.Append cmd.CreateParameter("@p_session_id", adVarChar, adParamInput, 255, g_sessionToken)
    
    cmd.Execute

    conn.Close
    
    ' Clear the session token
    g_sessionToken = ""
End Sub
```

### Summary

By centralizing the connection logic and using a global variable to store the session token, you avoid repeating the connection string in every function. This approach ensures that each subsequent action after login uses the established session for authentication and authorization.

Here's a complete example to clarify:

```vba
' Declare global variables to store the session token and the connection
Public g_sessionToken As String

' Function to create a DSN-less connection using the generic user
Public Function CreatePostgresConnection() As ADODB.Connection
    Dim conn As ADODB.Connection
    Set conn = New ADODB.Connection

    conn.ConnectionString = "Driver={PostgreSQL Unicode};" & _
                            "Server=your_server_address;" & _
                            "Port=5432;" & _
                            "Database=your_database_name;" & _
                            "Uid=generic_user;" & _
                            "Pwd=generic_password;"
    conn.Open
    
    Set CreatePostgresConnection = conn
End Function

' Function to validate user login and store session token
Public Function ValidateUser(username As String, password As String) As Boolean
    Dim conn As ADODB.Connection
    Dim cmd As ADODB.Command
    Dim rs As ADODB.Recordset
    Dim isValid As Boolean

    Set conn = CreatePostgresConnection()

    Set cmd = New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandText = "SELECT user_login(?, ?, ?)"
    cmd.Parameters.Append cmd.CreateParameter("@p_username", adVarChar, adParamInput, 255, username)
    cmd.Parameters.Append cmd.CreateParameter("@p_password", adVarChar, adParamInput, 255, password)
    cmd.Parameters.Append cmd.CreateParameter("@p_duration", adVarChar, adParamInput, 255, "1 hour") ' Session duration

    Set rs = cmd.Execute
    If Not rs.EOF Then
        g_sessionToken = rs.Fields(0).Value
        isValid = Not IsNull(g_sessionToken)
    End If
    
    rs.Close
    conn.Close

    ValidateUser = isValid
End Function

' Function to log an action
Public Sub LogAction(action As String, details As String)
    Dim conn As ADODB.Connection
    Dim cmd As ADODB.Command

    Set conn = CreatePostgresConnection()

    Set cmd = New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandText = "SELECT log_action(?, ?, ?)"
    cmd.Parameters.Append cmd.CreateParameter("@p_session_id", adVarChar, adParamInput, 255, g_sessionToken)
    cmd.Parameters.Append cmd.CreateParameter("@p_action", adVarChar, adParamInput, 255, action)
    cmd.Parameters.Append cmd.CreateParameter("@p_details", adVarChar, adParamInput, 255, details)
    
    cmd.Execute

    conn.Close
End Sub

' Function to log out the user and invalidate the session token
Public Sub LogoutUser()
    Dim conn As ADODB.Connection
    Dim cmd As ADODB.Command

    Set conn = CreatePostgresConnection()

    Set cmd = New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandText = "SELECT invalidate_session(?)"
    cmd.Parameters.Append cmd.CreateParameter("@p_session_id", adVarChar, adParamInput, 255, g_sessionToken)
    
    cmd.Execute

    conn.Close
    
    ' Clear the session token
    g_sessionToken = ""
End Sub
```

This structure ensures that the connection details are defined once, and the session token is reused for authenticated operations.