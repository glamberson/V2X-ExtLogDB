' insert mrl line items
' version 0.8.69

Public Sub InsertMRLLineItems()
    Dim jsonData As Variant
    Dim updateSource As String
    Dim result As Variant
    Dim jsonString As String
    Dim errorLog As String
    Dim chunks() As String
    Dim i As Long
    Dim chunkResult As Variant
    Dim totalCount As Long, successCount As Long, duplicateCount As Long, errorCount As Long
    Dim parsedResult As Variant
    
    Set frm = Forms!frMRL
    jsonData = ConvertToJSON()
    jsonString = CStr(jsonData(0))
    errorLog = CStr(jsonData(1))
    updateSource = frm.txtUpdateSource.Value ' Get the update source from the text box
    
    ' Debugging output
    Debug.Print "Function name: insert_mrl_line_items"
    Debug.Print "JSON Data length: " & Len(jsonString)
    Debug.Print "Update Source: " & updateSource
    Debug.Print "Pre-insert Error Log: " & errorLog
    
    ' Split the JSON data into chunks if it's too large
    Const MAX_CHUNK_SIZE As Long = 100000 ' Adjust as needed
    
    If Len(jsonString) > MAX_CHUNK_SIZE Then
        chunks = SplitJsonIntoChunks(jsonString, MAX_CHUNK_SIZE)
        
        For i = LBound(chunks) To UBound(chunks)
            Debug.Print "Processing chunk " & i & " of " & UBound(chunks)
            Debug.Print "Chunk length: " & Len(chunks(i))
            
            chunkResult = ExecuteProtectedFunction("insert_mrl_line_items", chunks(i), updateSource)
            
            ' Process result for each chunk
            If Not IsNull(chunkResult) Then
                parsedResult = ParseNoticeMessage(CStr(chunkResult))
                
                If IsArray(parsedResult) Then
                    totalCount = totalCount + parsedResult(0)
                    successCount = successCount + parsedResult(1)
                    duplicateCount = duplicateCount + parsedResult(2)
                    errorCount = errorCount + parsedResult(3)
                Else
                    MsgBox "Unexpected result format from insert_mrl_line_items for chunk " & i & ". Check the database logs for details.", vbExclamation
                End If
            Else
                MsgBox "Unexpected result type from insert_mrl_line_items for chunk " & i & ". Check the database logs for details.", vbExclamation
            End If
        Next i
        
        ' Combine results from all chunks
        result = "Total: " & totalCount & ", Success: " & successCount & ", Duplicates: " & duplicateCount & ", Errors: " & errorCount
    Else
        result = ExecuteProtectedFunction("insert_mrl_line_items", jsonString, updateSource)
        
        ' Parse the results
        parsedResult = ParseNoticeMessage(CStr(result))
        
        If IsArray(parsedResult) Then
            totalCount = parsedResult(0)
            successCount = parsedResult(1)
            duplicateCount = parsedResult(2)
            errorCount = parsedResult(3)
        Else
            MsgBox "Unexpected result format from insert_mrl_line_items. Check the database logs for details.", vbExclamation
            Exit Sub
        End If
    End If
    
    ' Log errors and duplicates for later processing
    LogErrorsAndDuplicates totalCount, successCount, duplicateCount, errorCount, errorLog
    
    ' Display results
    MsgBox "Process completed." & vbNewLine & _
           "Total Records: " & totalCount & vbNewLine & _
           "Successful Inserts: " & successCount & vbNewLine & _
           "Duplicate Records: " & duplicateCount & vbNewLine & _
           "Failed Inserts: " & errorCount & vbNewLine & _
           "See error log for details.", vbInformation
    
    ' Save error logs to a file
    Dim fso As Object
    Dim fileName As String
    Set fso = CreateObject("Scripting.FileSystemObject")
    fileName = "C:\Temp\MRLInsertErrorLog_" & Format(Now, "yyyymmdd_hhnnss") & ".txt"
    fso.CreateTextFile(fileName).Write "Pre-insert Errors:" & vbNewLine & errorLog & vbNewLine & vbNewLine & _
                                       "Insert Process Results:" & vbNewLine & CStr(result)
    MsgBox "Error log has been saved to " & fileName, vbInformation
End Sub
