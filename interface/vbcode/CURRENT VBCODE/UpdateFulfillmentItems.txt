
' UpdateFulfillmentItems
' version 0.9.48

Public Sub UpdateFulfillmentItems()
    Dim jsonData As Variant
    Dim updateSource As String
    Dim result As Variant
    Dim jsonString As String
    Dim errorLog As String
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim jsonObject As Object
    Dim logFile As String
    
    On Error GoTo ErrorHandler
    
    ' Initialize log file
    logFile = "C:\Temp\FulfillmentUpdateLog_" & Format(Now, "yyyymmdd_hhnnss") & ".txt"
    WriteToLogFile logFile, "Starting UpdateFulfillmentItems"
    
    On Error Resume Next
    Set frm = Forms!frMRL
    If Err.Number <> 0 Then
        WriteToLogFile logFile, "Error setting form reference: " & Err.description
        WriteToLogFile logFile, "Variable: frm"
        Err.Clear
    End If
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    Set rs = db.OpenRecordset("TempTable", dbOpenSnapshot)
    
    On Error Resume Next
    jsonData = ConvertToJSON(rs)
    If Err.Number <> 0 Then
        WriteToLogFile logFile, "Error in ConvertToJSON: " & Err.description
        WriteToLogFile logFile, "Variable: " & GetVariableName(rs)
        Err.Clear
    End If
    On Error GoTo ErrorHandler
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    
    On Error Resume Next
    jsonString = CStr(jsonData(0))
    If Err.Number <> 0 Then
        WriteToLogFile logFile, "Error setting jsonString: " & Err.description
        WriteToLogFile logFile, "Variable: jsonData"
        Err.Clear
    End If
    
    errorLog = CStr(jsonData(1))
    If Err.Number <> 0 Then
        WriteToLogFile logFile, "Error setting errorLog: " & Err.description
        WriteToLogFile logFile, "Variable: jsonData"
        Err.Clear
    End If
    
    updateSource = frm.txtUpdateSource.Value
    If Err.Number <> 0 Then
        WriteToLogFile logFile, "Error setting updateSource: " & Err.description
        WriteToLogFile logFile, "Variable: frm.txtUpdateSource"
        Err.Clear
    End If
    On Error GoTo ErrorHandler
    
    WriteToLogFile logFile, "JSON string length: " & Len(jsonString)
    WriteToLogFile logFile, "Update source: " & updateSource
    
    WriteToLogFile logFile, "Calling ExecuteProtectedFunction"
    result = ExecuteProtectedFunction("update_fulfillment_items", jsonString, updateSource)
    WriteToLogFile logFile, "ExecuteProtectedFunction completed"
    
    ' Check the result
    If Not IsNull(result) Then
        WriteToLogFile logFile, "Result type: " & TypeName(result)
        WriteToLogFile logFile, "Result value: " & result
        
        Set jsonObject = ParseJson(result)
        
        If Not jsonObject Is Nothing Then
            Dim status As String
            Dim batchId As String
            Dim totalCount As Long
            Dim successCount As Long
            Dim warningCount As Long
            Dim errorCount As Long
            Dim multipleRecordsCount As Long
            Dim operationType As String
            Dim timestamp As Date
            
            status = jsonObject("status")
            batchId = jsonObject("batch_id")
            totalCount = CLng(jsonObject("total"))
            successCount = CLng(jsonObject("success"))
            warningCount = CLng(jsonObject("warnings"))
            errorCount = CLng(jsonObject("errors"))
            multipleRecordsCount = CLng(jsonObject("multiple_records"))
            operationType = jsonObject("operation")
            timestamp = CDate(jsonObject("timestamp"))
            
            ' Log errors and warnings for later processing
            LogErrorsAndDuplicates totalCount, successCount, warningCount, errorCount, errorLog, True, batchId
            
            ' Log results
            WriteToLogFile logFile, "Process completed."
            WriteToLogFile logFile, "Status: " & status
            WriteToLogFile logFile, "Batch ID: " & batchId
            WriteToLogFile logFile, "Total Records: " & totalCount
            WriteToLogFile logFile, "Successful Updates: " & successCount
            WriteToLogFile logFile, "Warnings: " & warningCount
            WriteToLogFile logFile, "Errors: " & errorCount
            WriteToLogFile logFile, "Multiple Records: " & multipleRecordsCount
            WriteToLogFile logFile, "Operation: " & operationType
            WriteToLogFile logFile, "Timestamp: " & timestamp
            
            ' Display results
            MsgBox "Process completed." & vbNewLine & _
                   "Status: " & status & vbNewLine & _
                   "Batch ID: " & batchId & vbNewLine & _
                   "Total Records: " & totalCount & vbNewLine & _
                   "Successful Updates: " & successCount & vbNewLine & _
                   "Warnings: " & warningCount & vbNewLine & _
                   "Errors: " & errorCount & vbNewLine & _
                   "Multiple Records: " & multipleRecordsCount & vbNewLine & _
                   "Operation: " & operationType & vbNewLine & _
                   "Timestamp: " & timestamp & vbNewLine & _
                   "See log file for details.", vbInformation
            
            ' Append error logs to the file
            WriteToLogFile logFile, vbNewLine & "Pre-update Errors:"
            WriteToLogFile logFile, errorLog
            WriteToLogFile logFile, vbNewLine & "Update Process Results:"
            WriteToLogFile logFile, "Raw result: " & CStr(result)
            
        Else
            WriteToLogFile logFile, "Failed to parse result JSON. Raw result: " & result
            MsgBox "Failed to parse result JSON. Check the log file for details.", vbExclamation
        End If
    Else
        WriteToLogFile logFile, "Unexpected result type from update_fulfillment_items. Result is Null."
        MsgBox "Unexpected result type from update_fulfillment_items. Check the log file for details.", vbExclamation
    End If

    WriteToLogFile logFile, "UpdateFulfillmentItems completed"
    MsgBox "Process completed. Log file has been saved to " & logFile, vbInformation

    Exit Sub

ErrorHandler:
    WriteToLogFile logFile, "Error in UpdateFulfillmentItems: " & Err.description
    WriteToLogFile logFile, "Error Number: " & Err.Number
    WriteToLogFile logFile, "Error Source: " & Err.Source
    WriteToLogFile logFile, "Line: " & Erl
    MsgBox "An error occurred: " & Err.description & vbNewLine & "See log file for details.", vbExclamation
    Resume Next
End Sub

