' execute protected (postgres) function or procedure
' version 0.8.46

Public Function ExecuteProtectedFunction(functionName As String, ParamArray args()) As Variant
    ' ... (keep the existing code up to the execution part)

    ' Execute the actual function or procedure
    Set cmdExecute = New ADODB.Command
    With cmdExecute
        .ActiveConnection = g_conn
        .CommandType = adCmdText
        
        If functionName = "insert_mrl_line_items" Then
            commandText = "{ ? = CALL " & functionName & "(?::jsonb, ?::text) }"
            .CommandText = commandText
            
            ' Add output parameter for summary
            .Parameters.Append .CreateParameter("return_value", adVarChar, adParamOutput, 1000)
            
            ' Add input parameters
            .Parameters.Append .CreateParameter("param1", adLongVarChar, adParamInput, -1, functionArgs(0))
            .Parameters.Append .CreateParameter("param2", adVarChar, adParamInput, 255, functionArgs(1))
        Else
            ' Handle other functions/procedures as before
            commandText = "CALL " & functionName & "("
            
            ' Add parameters
            For i = LBound(functionArgs) To UBound(functionArgs)
                If i > LBound(functionArgs) Then commandText = commandText & ", "
                commandText = commandText & "?"
                .Parameters.Append .CreateParameter("param" & (i + 1), adLongVarChar, adParamInput, -1, functionArgs(i))
            Next i
            
            commandText = commandText & ")"
            .CommandText = commandText
        End If
        
        ' Debug print
        Debug.Print "Command text: " & commandText
        Debug.Print "Command text length: " & Len(commandText)
    End With
    
    On Error GoTo ErrorHandler
    
    cmdExecute.Execute
    
    ' For insert_mrl_line_items, retrieve the summary from the output parameter
    If functionName = "insert_mrl_line_items" Then
        ExecuteProtectedFunction = cmdExecute.Parameters("return_value").Value
    Else
        ExecuteProtectedFunction = True ' Indicate success for other procedures
    End If
    
    ' ... (keep the rest of the function as is)
End Function
