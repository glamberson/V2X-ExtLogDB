
-- Create KPPO Admin role with full access
CREATE ROLE kppo_admin_user WITH LOGIN PASSWORD 'admin_password';
GRANT ALL PRIVILEGES ON DATABASE your_database TO kppo_admin_user;

-- Create read-only role for Chesapeake Warehouse, NAVSUP, and LSC
CREATE ROLE readonly_user WITH LOGIN PASSWORD 'readonly_password';
GRANT CONNECT ON DATABASE your_database TO readonly_user;
GRANT USAGE ON SCHEMA public TO readonly_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly_user;
GRANT INSERT, UPDATE ON TABLE fulfillment_items TO readonly_user;
GRANT INSERT, UPDATE ON TABLE line_item_comments TO readonly_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly_user;

-- Create role for Report Viewer with specific permissions
CREATE ROLE report_viewer_user WITH LOGIN PASSWORD 'report_password';
GRANT CONNECT ON DATABASE your_database TO report_viewer_user;
GRANT USAGE ON SCHEMA public TO report_viewer_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO report_viewer_user;
GRANT INSERT, UPDATE ON TABLE line_item_comments TO report_viewer_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO report_viewer_user;

-- duplicate:

CREATE TABLE roles (
    role_id SERIAL PRIMARY KEY,
    role_name VARCHAR(100) UNIQUE NOT NULL
);

-- Insert predefined roles
INSERT INTO roles (role_name) VALUES
    ('KPPO Admin'),
    ('Chesapeake Warehouse'),
    ('NAVSUP'),
    ('Logistics Service Center (LSC)'),
    ('Report Viewer');


-- pseudo code

def get_db_connection(username, password):
    user = authenticate_user(username, password)
    if user:
        if user.role == 'KPPO Admin':
            connection = psycopg2.connect(dbname="your_database", user="kppo_admin_user", password="admin_password")
        elif user.role in ['Chesapeake Warehouse', 'NAVSUP', 'Logistics Service Center (LSC)']:
            connection = psycopg2.connect(dbname="your_database", user="readonly_user", password="readonly_password")
        elif user.role == 'Report Viewer':
            connection = psycopg2.connect(dbname="your_database", user="report_viewer_user", password="report_password")
        else:
            raise Exception("Invalid role")
        return connection
    else:
        raise Exception("Authentication failed")

def authenticate_user(username, password):
    # Query the users table to authenticate the user
    # Return the user object if authenticated, otherwise return None


-- grant permissions

-- Grant permissions to kppo_admin_user
GRANT ALL PRIVILEGES ON DATABASE your_database TO kppo_admin_user;

-- Grant permissions to readonly_user
GRANT CONNECT ON DATABASE your_database TO readonly_user;
GRANT USAGE ON SCHEMA public TO readonly_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly_user;
GRANT INSERT, UPDATE ON TABLE fulfillment_items TO readonly_user;
GRANT INSERT, UPDATE ON TABLE line_item_comments TO readonly_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly_user;

-- Grant permissions to report_viewer_user
GRANT CONNECT ON DATABASE your_database TO report_viewer_user;
GRANT USAGE ON SCHEMA public TO report_viewer_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO report_viewer_user;
GRANT INSERT, UPDATE ON TABLE line_item_comments TO report_viewer_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO report_viewer_user;


