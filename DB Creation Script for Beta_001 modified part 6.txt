
-- Function to log user activity
CREATE OR REPLACE FUNCTION log_user_activity()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO user_activity (
        user_id,
        activity_type,
        activity_time,
        activity_details
    )
    VALUES (
        NEW.user_id,
        NEW.activity_type,
        CURRENT_TIMESTAMP,
        NEW.activity_details
    );

    -- Also log the activity in the audit trail
    INSERT INTO audit_trail (
        user_id,
        action,
        changed_by,
        changed_at,
        details,
        update_source,
        role_id,
        order_line_item_id,
        fulfillment_item_id
    )
    VALUES (
        NEW.user_id,
        NEW.activity_type,
        (SELECT username FROM users WHERE user_id = NEW.user_id),
        CURRENT_TIMESTAMP,
        NEW.activity_details,
        'User Activity',
        (SELECT role_id FROM users WHERE user_id = NEW.user_id),
        NULL,
        NULL
    );

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to log user login activity
CREATE TRIGGER trg_log_user_login
AFTER INSERT ON user_activity
FOR EACH ROW
WHEN (NEW.activity_type = 'login')
EXECUTE PROCEDURE log_user_activity();

-- Trigger to log user logout activity
CREATE TRIGGER trg_log_user_logout
AFTER INSERT ON user_activity
FOR EACH ROW
WHEN (NEW.activity_type = 'logout')
EXECUTE PROCEDURE log_user_activity();


-- Function to log failed login attempts
CREATE OR REPLACE FUNCTION log_failed_login(
    p_username VARCHAR(100),
    p_reason TEXT
)
RETURNS VOID AS $$
DECLARE
    v_user_id INT;
BEGIN
    -- Get user ID if the username exists
    SELECT user_id INTO v_user_id
    FROM users
    WHERE username = p_username;

    -- Insert failed login activity
    INSERT INTO user_activity (
        user_id,
        activity_type,
        activity_time,
        activity_details
    )
    VALUES (
        v_user_id,
        'failed_login',
        CURRENT_TIMESTAMP,
        p_reason
    );
END;
$$ LANGUAGE plpgsql;
